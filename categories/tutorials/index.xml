<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorials on JavaIsland</title>
    <link>https://www.javai.net/categories/tutorials/</link>
    <description>Recent content in tutorials on JavaIsland</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 03 Apr 2022 15:17:30 +0800</lastBuildDate><atom:link href="https://www.javai.net/categories/tutorials/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Practical application scenarios for pipeline stream</title>
      <link>https://www.javai.net/post/202204/piped-stream/</link>
      <pubDate>Sun, 03 Apr 2022 15:17:30 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/piped-stream/</guid>
      <description>Preface PipedInputStream and PipedOutputStream are designed to solve cross-thread byte data transfers. They always come in pairs and can only be used on two different threads, using piped input and output streams in one thread can cause deadlocks. In some business scenarios, using pipeline streams will increase the speed of file uploads and reduce CPU and IO overhead, this is very practical, so this article talks about Practical application scenarios for pipeline stream.</description>
    </item>
    
    <item>
      <title>Principle of implementation of atomic operations</title>
      <link>https://www.javai.net/post/202204/atomic-principle/</link>
      <pubDate>Sat, 02 Apr 2022 16:00:46 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/atomic-principle/</guid>
      <description>1. Introduction Atomic means &amp;ldquo;the smallest particle that cannot be further divided&amp;rdquo;, and atomic operation means &amp;ldquo;an operation or series of operations that cannot be interrupted&amp;rdquo;. Implementing atomic operations on a multiprocessor becomes a bit complicated. In this article, let&amp;rsquo;s talk about how atomic operations are implemented on Intel processors and in Java.
2. Definition of Terms Compare and Swap CAS operations require two values to be entered, an old value (the value before the desired operation) and a new value, during which the old value is compared to the new value if it has not changed, and not exchanged if it.</description>
    </item>
    
    <item>
      <title>Spring Framework RCE Solution</title>
      <link>https://www.javai.net/post/202204/spring-framework-rce-solution/</link>
      <pubDate>Fri, 01 Apr 2022 22:47:06 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/spring-framework-rce-solution/</guid>
      <description>Just yesterday Spring officially announced a Spring Framework RCE vulnerability CVE-2022-22965.
Upgrading to Spring Framework 5.3.18+ or 5.2.20+ remains the main official Spring recommendation, which officially claims to address the root cause and prevent some other vulnerability attacks, and these also provide fixes for other CVEs.
Although the vulnerability is not in Tomcat itself, the Apache Tomcat team has also released versions 10.0.20, 9.0.62 and 8.5.78 with it, which are the official Tomcat solutions for the reported CVE-2022-22965 vulnerability, which has been addressed in the above versions, for older The above version has resolved the CVE-2022-22965 vulnerability, and for older, unsupported versions of Spring Framework, the vulnerability can be circumvented by upgrading the Tomcat version.</description>
    </item>
    
    <item>
      <title>Thread pool rejection policy</title>
      <link>https://www.javai.net/post/202204/thread-pool-rejection-strategy/</link>
      <pubDate>Fri, 01 Apr 2022 14:10:49 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/thread-pool-rejection-strategy/</guid>
      <description>Preface When it comes to java thread pools nothing is more familiar than the ExecutorService interface. jdk1.5 adds java.util.concurrent package under this api, which greatly simplifies the development of multi-threaded code. Whether you use FixedThreadPool or CachedThreadPool the implementation behind it is ThreadPoolExecutor. threadPoolExecutor is a typical product of cache pooling design, because the pool has a size, when the pool volume is not enough to carry, it involves a rejection policy.</description>
    </item>
    
    <item>
      <title>Java reflection mechanism</title>
      <link>https://www.javai.net/post/202203/java-reflect/</link>
      <pubDate>Thu, 31 Mar 2022 15:53:34 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202203/java-reflect/</guid>
      <description>What is Reflection In the runtime state, for any class, you can know all the properties and methods of the class; for any object, you can call any of its methods and properties; this dynamically obtained information and dynamic invocation of the object&amp;rsquo;s methods is called the reflection mechanism of the Java language. So what can we do with reflection?
 Analyze classes at runtime. Look at objects at runtime. We can also use reflection to write a toString method for all classes to use.</description>
    </item>
    
    <item>
      <title>A scenario using Threadlocal to solve concurrency and efficiency problems</title>
      <link>https://www.javai.net/post/202203/threadlocal-use/</link>
      <pubDate>Wed, 30 Mar 2022 20:39:02 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202203/threadlocal-use/</guid>
      <description>ThreadLocal is a tool provided by JDK 1.2, a tool mainly to solve the problem of sharing resources under multi-threaded, In the next section, we will analyze how ThreadLocal can be used to solve concurrency problems and improve code efficiency in development, starting from the definition of ThreadLocal and its application scenarios.
Scenario 1, ThreadLocal is used to save objects that are unique to each thread, creating a copy for each thread so that each thread can modify the copy it owns without affecting the other threads&amp;rsquo; copies, ensuring thread safety.</description>
    </item>
    
    <item>
      <title>A common defect in java systems - Memory DoS</title>
      <link>https://www.javai.net/post/202203/memory-dos/</link>
      <pubDate>Tue, 29 Mar 2022 20:09:45 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202203/memory-dos/</guid>
      <description>I. What is DoS? DoS is short for Denial of Service, which means denial of service. The attack that causes DoS is called a DoS attack, and its purpose is to make the computer or network unable to provide normal services. Denial of Service exists on various web services, this web service can be implemented in c, c++, or go, java, php, python, and other languages.
II. Status of Java DoS In various open source and closed source java system products, we often see announcements about DoS defects, most of which are CPU exhaustion type or business offload type DoS.</description>
    </item>
    
    <item>
      <title>Using encryption and decryption in Java</title>
      <link>https://www.javai.net/post/202203/huttol-crypto/</link>
      <pubDate>Mon, 28 Mar 2022 21:48:49 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202203/huttol-crypto/</guid>
      <description>Instructions In project development, in order to ensure the security of data and user privacy, we usually encrypt key information, this article details how to use hutool in java language to quickly encrypt and decrypt data, hope you can help.
If your project is built on Maven, you can introduce Hutool through pom to use the encryption and decryption function.
1 2 3 4 5  &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;cn.hutool&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hutool-crypto&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.7.15&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;   If your project is not built based on maven, you can also directly download the jar package to use.</description>
    </item>
    
    <item>
      <title>Java Startup Params</title>
      <link>https://www.javai.net/post/202203/java-startup-params/</link>
      <pubDate>Sun, 27 Mar 2022 19:42:45 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202203/java-startup-params/</guid>
      <description>Basic Format Run java -help to see the basic format and options
1 2 3 4 5 6 7 8  [root@localhost ~]# java -help Usage: java [-options] class [args...] (execute class) or java [-options] -jar jarfile [args...] (execute jar file) Startup options are omitted [-options]: options [-options]: options [args...] : Passes a parameter to the main method   Standard options  -help / -? : output help information -version : output version information -classpath / -cp: class search path for directories and zip/jar files .</description>
    </item>
    
    <item>
      <title>JavaNIO and Zero Copy</title>
      <link>https://www.javai.net/post/202203/zero-copy/</link>
      <pubDate>Sat, 26 Mar 2022 21:46:31 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202203/zero-copy/</guid>
      <description>Zero-copy in the Linux operating system Let&amp;rsquo;s start with the general I/O process of Linux This is a procedure that reads from a disk file and writes to it via socket, and the corresponding system call is as follows.
1 2  read(file, tmp_buf, len); write(socket, tmp_buf, len);    The program uses the read() system call to change the system from user state to kernel state, and the data from the disk is read into the kernel buffer by means of DMA (Direct memory access).</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>thread on JavaIsland</title>
    <link>https://www.javai.net/tags/thread/</link>
    <description>Recent content in thread on JavaIsland</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 20 Apr 2022 14:42:24 +0800</lastBuildDate><atom:link href="https://www.javai.net/tags/thread/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Basic use of ThreadPool</title>
      <link>https://www.javai.net/post/202204/java-thread-pool/</link>
      <pubDate>Wed, 20 Apr 2022 14:42:24 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-thread-pool/</guid>
      <description>Preface In Java, threads are the counterpart of system threads and are used to handle a range of system resources. The number of threads that can be opened is limited in both windows and linux, so if you create unlimited threads in your java program, you will encounter a situation where no threads can be created.
CPU cores are limited and if there are multiple threads running at the same time, the CPU will rotate according to the priority of the threads and allocate a specific amount of CPU time to each thread.</description>
    </item>
    
    <item>
      <title>The fork join framework in java</title>
      <link>https://www.javai.net/post/202204/java-fork-join/</link>
      <pubDate>Wed, 20 Apr 2022 14:33:27 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-fork-join/</guid>
      <description>Preface Fork join framework is the introduction of java 7 framework, the introduction of this framework is mainly to improve the ability of parallel computing.
Fork join has two main steps, the first is fork, a large task into many small tasks, the second is join, the results of the first task join up to generate the final result. If there is no return value in the first step, join will wait until all the small tasks are finished.</description>
    </item>
    
    <item>
      <title>Daemon Thread in Java</title>
      <link>https://www.javai.net/post/202204/java-daemon-thread/</link>
      <pubDate>Wed, 20 Apr 2022 14:19:16 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-daemon-thread/</guid>
      <description>Preface There are two types of threads in java, user threads and daemon threads.
User threads are high priority threads and the JVM will wait for all the User Threads to finish running before it finishes running.
daemon threads are low-priority threads that serve User Threads. Because daemon threads are low priority and serve only user threads, the JVM will automatically exit when all user threads are finished, regardless of whether there are still daemon threads running.</description>
    </item>
    
    <item>
      <title>AbstractQueuedSynchronizer implementation principle - 2</title>
      <link>https://www.javai.net/post/202204/java-aqs-principle-2/</link>
      <pubDate>Tue, 19 Apr 2022 15:11:02 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-aqs-principle-2/</guid>
      <description>Preface In the previous articleAbstractQueuedSynchronizer implementation principle - 1, we explained the acquisition and release of exclusive synchronization state in AbstractQueuedSynchronizer, and here we start to explain the acquisition and release of shared synchronization state in AbstractQueuedSynchronizer.
Shared Synchronous State Acquisition and Release Shared lock as the name implies is that multiple threads can share a lock, use acquireShared in the synchronizer to get the shared lock (synchronous state), the source code of the method is as follows.</description>
    </item>
    
    <item>
      <title>AbstractQueuedSynchronizer implementation principle - 1</title>
      <link>https://www.javai.net/post/202204/java-aqs-principle-1/</link>
      <pubDate>Tue, 19 Apr 2022 14:29:23 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-aqs-principle-1/</guid>
      <description>Preface AbstractQueuedSynchronizer is the basic framework for implementing concurrency tools in the JDK, and a deeper understanding of it will help us to better use its features and related tools. We hope you will read this article carefully and gain something from it.
In Java, access to shared resources by multiple threads is controlled by lock. We know that the lock function can be implemented by the synchronized keyword, which can implicitly acquire locks, that is, we do not need to care about the process of acquiring and releasing locks by using this keyword, but while it provides convenience, it also means that its flexibility is reduced.</description>
    </item>
    
    <item>
      <title>Simple use of the Atomic class</title>
      <link>https://www.javai.net/post/202204/java-atomic-class/</link>
      <pubDate>Mon, 18 Apr 2022 17:14:34 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-atomic-class/</guid>
      <description>Problem Background In a multi-threaded environment, the most common problem we encounter is synchronizing the values of variables. Since variables need to be shared across multiple threads, we must need to employ some synchronization mechanism to control them.
From the previous article we know that the Lock mechanism can be used, and of course, the Atomic class we are talking about today.
Here we will introduce each of the two ways.</description>
    </item>
    
    <item>
      <title>Use of join in java</title>
      <link>https://www.javai.net/post/202204/java-join-use/</link>
      <pubDate>Mon, 18 Apr 2022 16:24:46 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-join-use/</guid>
      <description>Introduction join() is a method we often use in java that sets the current thread to the WAITTING state and then waits for the calling thread to finish executing or be interrupted.
Definition join() is a method defined in Thread, let&amp;rsquo;s look at his definition.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  /** * Waits for this thread to die.</description>
    </item>
    
    <item>
      <title>The life cycle of threads in java</title>
      <link>https://www.javai.net/post/202204/java-thread-life-cycle/</link>
      <pubDate>Mon, 18 Apr 2022 15:55:37 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-thread-life-cycle/</guid>
      <description>Introduction Threads is a frequently used technology in java, this article will explain in detail the life cycle of threads in java, I hope you can give some help.
The state of Thread in java There are six states of Thread in java, which are.
 NEW - newly created Thread, has not yet started execution RUNNABLE - Thread in runnable state, including ready to run and running. BLOCKED - Threads that are waiting for a resource lock WAITING - A thread that is waiting indefinitely for other threads to perform a specific operation TIMED_WAITING - Waiting for a certain amount of time for other threads to perform a specific operation TERMINATED - the thread has finished executing  We can visualize this in a diagram.</description>
    </item>
    
    <item>
      <title>The use of ThreadLocal in java</title>
      <link>https://www.javai.net/post/202204/java-threadlocal-use/</link>
      <pubDate>Sun, 17 Apr 2022 13:47:38 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-threadlocal-use/</guid>
      <description>Preface ThreadLocal is mainly used to store data for the current thread, this data is only accessible by the current thread.
When defining a ThreadLocal, we can also define specific types of objects stored in the ThreadLocal.
1  ThreadLocal&amp;lt;Integer&amp;gt; threadLocalValue = new ThreadLocal&amp;lt;&amp;gt;();   Above we have defined a ThreadLocal object that stores an Integer.
To store and get the object in ThreadLocal is also very simple, using get() and set().</description>
    </item>
    
    <item>
      <title>The difference between Runnable and Callable in java</title>
      <link>https://www.javai.net/post/202204/java-runnable-callable/</link>
      <pubDate>Sun, 17 Apr 2022 13:40:15 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-runnable-callable/</guid>
      <description>Preface In java&amp;rsquo;s multi-threaded development Runnable has always been the core of multi-threading, and Callable is an enhanced version of java 1.5 added in.
In this article, we will explore the differences between Runnable and Callable in detail.
Operation mechanism First look at the interface definition of Runnable and Callable:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  @FunctionalInterface public interface Runnable { /** * When an object implementing interface &amp;lt;code&amp;gt;Runnable&amp;lt;/code&amp;gt; is used * to create a thread, starting the thread causes the object&amp;#39;s * &amp;lt;code&amp;gt;run&amp;lt;/code&amp;gt; method to be called in that separately executing * thread.</description>
    </item>
    
    <item>
      <title>The use of ExecutorService in java concurrency</title>
      <link>https://www.javai.net/post/202204/java-executorservice-use/</link>
      <pubDate>Sun, 17 Apr 2022 13:29:57 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-executorservice-use/</guid>
      <description>Preface ExecutorService is a framework for asynchronous execution in java. By using ExecutorService you can easily create a multi-threaded execution environment.
This article will explain in detail the specific use of ExecutorService.
Creating an ExecutorService Generally speaking, there are two ways to create an ExecutorService.
The first way is to use the factory class methods in Executors, for example.
1  ExecutorService executor = Executors.newFixedThreadPool(10);   In addition to the newFixedThreadPool method, Executors contains a number of methods to create an ExecutorService.</description>
    </item>
    
    <item>
      <title>The use of Future in java</title>
      <link>https://www.javai.net/post/202204/java-future-use/</link>
      <pubDate>Tue, 12 Apr 2022 17:24:00 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-future-use/</guid>
      <description>The use of Future in java Future is an interface introduced in java 1.5 that can be used to get asynchronous results easily. This article will explain how to use Future through specific examples.
Creating Future As mentioned above, Future represents the result of asynchronous execution, which means that when the asynchronous execution is finished, the returned result will be saved in Future.
So when do we use Future? Generally speaking, when we execute a long-running task, using Future allows us to temporarily deal with other tasks, and then return the result when the long task is finished.</description>
    </item>
    
    <item>
      <title>Synchronized keywords in java concurrency</title>
      <link>https://www.javai.net/post/202204/java-synchronized/</link>
      <pubDate>Mon, 11 Apr 2022 10:26:19 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-synchronized/</guid>
      <description>Introduction In a multi-threaded environment, we often encounter resource competition, such as multiple threads going to modify the same shared variable at the same time, it is necessary to perform some processing of the resource access method to ensure that only one thread accesses it at the same time.
Java provides the synchronized keyword to facilitate us to achieve the above operation.
Why synchronized Let&amp;rsquo;s take an example where we create a class that provides a setSum method.</description>
    </item>
    
    <item>
      <title>Difference between wait and sleep in java</title>
      <link>https://www.javai.net/post/202204/java-wait-sleep/</link>
      <pubDate>Sun, 10 Apr 2022 22:19:20 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-wait-sleep/</guid>
      <description>Introduction In this post, we will discuss the difference between wait() and sleep() methods in java. And discuss how to use these two methods.
Difference between wait and sleep wait() is a native method defined in Object.
1  public final native void wait(long timeout) throws InterruptedException;   So every instance of the class can call this method. wait() can only be called in a synchronized block. It will release the lock put on the object when it is synchronized.</description>
    </item>
    
  </channel>
</rss>

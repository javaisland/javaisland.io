<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>stream on JavaIsland</title>
    <link>https://www.javai.net/tags/stream/</link>
    <description>Recent content in stream on JavaIsland</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 16 Jun 2022 16:43:35 +0800</lastBuildDate><atom:link href="https://www.javai.net/tags/stream/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building an infinite stream in java 8</title>
      <link>https://www.javai.net/post/202206/java-infinite-stream/</link>
      <pubDate>Thu, 16 Jun 2022 16:43:35 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202206/java-infinite-stream/</guid>
      <description>Introduction In java, we can convert a specific set into a stream, so in some cases, such as in a test environment, we need to construct a stream with a certain number of elements, how do we need to handle it?
Here we can construct an unlimited stream and then call the limit method to limit the number returned.
Basic use Let&amp;rsquo;s start with an example of using Stream.iterate to create an infinite Stream.</description>
    </item>
    
    <item>
      <title>Customizing parallelStream&#39;s thread pool</title>
      <link>https://www.javai.net/post/202206/java-parallel-stream-thread-pool/</link>
      <pubDate>Thu, 16 Jun 2022 15:36:40 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202206/java-parallel-stream-thread-pool/</guid>
      <description>Introduction By default, ForkJoinPool creates a thread for each processor, and parallelStream will use this shared thread pool to submit tasks if not specified.
So how do we handle a specific situation where we want to use a custom ForkJoinPool?
Common operations If we want to do an addition from 1 to 1000, we can use parallel stream like this.
1 2 3 4 5  List&amp;lt;Integer&amp;gt; integerList= IntStream.range(1,1000).boxed().collect(Collectors.toList()); ForkJoinPool customThreadPool = new ForkJoinPool(4); Integer total= integerList.</description>
    </item>
    
    <item>
      <title>Java stream common operations on streams</title>
      <link>https://www.javai.net/post/202205/java-stream-use/</link>
      <pubDate>Sat, 07 May 2022 17:04:19 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202205/java-stream-use/</guid>
      <description>Introduction As we all know, starting from Java8, jdk has added a new Stream class to complement the collection class.
Stream provides a higher-order abstraction of Java collection operations and expressions using an intuitive way similar to querying data from a database with SQL statements.
This style treats the collection of elements to be processed as a stream, which travels through the pipeline and can be processed at the nodes of the pipeline, such as filtering, sorting, aggregating, etc.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>parallel on JavaIsland</title>
    <link>https://www.javai.net/tags/parallel/</link>
    <description>Recent content in parallel on JavaIsland</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 16 Jun 2022 15:36:40 +0800</lastBuildDate><atom:link href="https://www.javai.net/tags/parallel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Customizing parallelStream&#39;s thread pool</title>
      <link>https://www.javai.net/post/202206/java-parallel-stream-thread-pool/</link>
      <pubDate>Thu, 16 Jun 2022 15:36:40 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202206/java-parallel-stream-thread-pool/</guid>
      <description>Introduction By default, ForkJoinPool creates a thread for each processor, and parallelStream will use this shared thread pool to submit tasks if not specified.
So how do we handle a specific situation where we want to use a custom ForkJoinPool?
Common operations If we want to do an addition from 1 to 1000, we can use parallel stream like this.
1 2 3 4 5  List&amp;lt;Integer&amp;gt; integerList= IntStream.range(1,1000).boxed().collect(Collectors.toList()); ForkJoinPool customThreadPool = new ForkJoinPool(4); Integer total= integerList.</description>
    </item>
    
  </channel>
</rss>

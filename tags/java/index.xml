<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on JavaIsland</title>
    <link>https://www.javai.net/tags/java/</link>
    <description>Recent content in java on JavaIsland</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 31 Mar 2022 15:53:34 +0800</lastBuildDate><atom:link href="https://www.javai.net/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java reflection mechanism</title>
      <link>https://www.javai.net/post/202203/java-reflect/</link>
      <pubDate>Thu, 31 Mar 2022 15:53:34 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202203/java-reflect/</guid>
      <description>What is Reflection In the runtime state, for any class, you can know all the properties and methods of the class; for any object, you can call any of its methods and properties; this dynamically obtained information and dynamic invocation of the object&amp;rsquo;s methods is called the reflection mechanism of the Java language. So what can we do with reflection?
 Analyze classes at runtime. Look at objects at runtime. We can also use reflection to write a toString method for all classes to use.</description>
    </item>
    
    <item>
      <title>A scenario using Threadlocal to solve concurrency and efficiency problems</title>
      <link>https://www.javai.net/post/202203/threadlocal-use/</link>
      <pubDate>Wed, 30 Mar 2022 20:39:02 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202203/threadlocal-use/</guid>
      <description>ThreadLocal is a tool provided by JDK 1.2, a tool mainly to solve the problem of sharing resources under multi-threaded, In the next section, we will analyze how ThreadLocal can be used to solve concurrency problems and improve code efficiency in development, starting from the definition of ThreadLocal and its application scenarios.
Scenario 1, ThreadLocal is used to save objects that are unique to each thread, creating a copy for each thread so that each thread can modify the copy it owns without affecting the other threads&amp;rsquo; copies, ensuring thread safety.</description>
    </item>
    
    <item>
      <title>Oracle cracks down on Java licensing issues, enterprises remove JDK overnight</title>
      <link>https://www.javai.net/post/202203/oracle-java-license/</link>
      <pubDate>Wed, 30 Mar 2022 13:04:22 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202203/oracle-java-license/</guid>
      <description>According to a report in the foreign media The Register and feedback from major enterprises, Oracle has recently begun to include Java in its software licensing review, with the aim of Oracle&amp;rsquo;s move is an effort to push companies to pay, an operation it routinely employs to boost payment rates.
Oracle introduced two licensing models for Java SE. In April 2019, Oracle began charging a license fee for Java that was previously free, which requires users to pay for a subscription to a commercial Java SE product in order to receive patches and updates.</description>
    </item>
    
    <item>
      <title>A common defect in java systems - Memory DoS</title>
      <link>https://www.javai.net/post/202203/memory-dos/</link>
      <pubDate>Tue, 29 Mar 2022 20:09:45 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202203/memory-dos/</guid>
      <description>I. What is DoS? DoS is short for Denial of Service, which means denial of service. The attack that causes DoS is called a DoS attack, and its purpose is to make the computer or network unable to provide normal services. Denial of Service exists on various web services, this web service can be implemented in c, c++, or go, java, php, python, and other languages.
II. Status of Java DoS In various open source and closed source java system products, we often see announcements about DoS defects, most of which are CPU exhaustion type or business offload type DoS.</description>
    </item>
    
    <item>
      <title>JDK 18 / Java 18 GA is released</title>
      <link>https://www.javai.net/post/202203/jdk18/</link>
      <pubDate>Mon, 28 Mar 2022 22:44:09 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202203/jdk18/</guid>
      <description>JDK 18 / Java 18 GA is released. JDK 18 is a short-term maintenance release that will receive six months of support. Despite this, it is still available for use in production environments. According to the development plan, JDK 19 will be released this September, and the next LTS version, JDK 21, will be released in September 2023.
JDK 18 includes a total of nine JEPs, as well as hundreds of smaller enhancements and more than a thousand bug fixes.</description>
    </item>
    
    <item>
      <title>Java Startup Params</title>
      <link>https://www.javai.net/post/202203/java-startup-params/</link>
      <pubDate>Sun, 27 Mar 2022 19:42:45 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202203/java-startup-params/</guid>
      <description>Basic Format Run java -help to see the basic format and options
1 2 3 4 5 6 7 8  [root@localhost ~]# java -help Usage: java [-options] class [args...] (execute class) or java [-options] -jar jarfile [args...] (execute jar file) Startup options are omitted [-options]: options [-options]: options [args...] : Passes a parameter to the main method   Standard options  -help / -? : output help information -version : output version information -classpath / -cp: class search path for directories and zip/jar files .</description>
    </item>
    
  </channel>
</rss>

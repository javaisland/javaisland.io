<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on JavaIsland</title>
    <link>https://www.javai.net/tags/java/</link>
    <description>Recent content in java on JavaIsland</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 24 Jul 2022 21:27:28 +0800</lastBuildDate><atom:link href="https://www.javai.net/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Nuclear-grade Log4j vulnerabilities remain prevalent and have ongoing impact</title>
      <link>https://www.javai.net/post/202207/log4j-vulnerability/</link>
      <pubDate>Sun, 24 Jul 2022 21:27:28 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202207/log4j-vulnerability/</guid>
      <description>Log4j &amp;ldquo;nuclear-grade&amp;rdquo; vulnerability Log4Shell may affect the world forever.
 The U.S. Department of Homeland Security (DHS) Cybersecurity Review Board (CSRB) recently released its investigative report in response to last year&amp;rsquo;s Log4Shell vulnerability.
 The CSRB is an agency established by DHS only this February to investigate major cybersecurity incidents and provide reports containing recommendations to enhance the nation&amp;rsquo;s cybersecurity. The CSRB&amp;rsquo;s first investigation was into the &amp;ldquo;nuclear-grade&amp;rdquo; vulnerability that erupted in Log4j last year.</description>
    </item>
    
    <item>
      <title>Java Date Timestamp Date Comparison Pitfalls</title>
      <link>https://www.javai.net/post/202207/time-comparison/</link>
      <pubDate>Mon, 18 Jul 2022 15:47:04 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202207/time-comparison/</guid>
      <description>Scenario reenactment   In the mysql database (innodb engine) tab table has a createAt field of type datetime(6) precise to milliseconds.Of course we know that mysql&amp;rsquo;s date field is only accurate to the second level by default, if you want to millisecond subtlety can be defined as datetime(6), from version 5.6.4 onwards support
  business interface A through the ORM framework to deposit a record in the table, here createAt deposit2016-04-13 15:20:39.</description>
    </item>
    
    <item>
      <title>StackOverflowError errors in Java</title>
      <link>https://www.javai.net/post/202207/stackvoerflow-error/</link>
      <pubDate>Mon, 18 Jul 2022 11:21:05 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202207/stackvoerflow-error/</guid>
      <description>Introduction StackOverflowError can be annoying for Java developers as it is one of the most common runtime errors we may encounter.
In this article, we will learn how this error occurs by looking at various code examples and how to handle it.
Stack Frames and StackOverflowerError Occur Let&amp;rsquo;s start with the basics. When a method is called, a new stack frame is created on the call stack. This stack frame contains the parameters of the called method, its local variables and the return address of the method, i.</description>
    </item>
    
    <item>
      <title>Jump table implementation in Java</title>
      <link>https://www.javai.net/post/202207/jump-table/</link>
      <pubDate>Mon, 18 Jul 2022 11:09:48 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202207/jump-table/</guid>
      <description>Introduction Jump table is a data structure for storing a sorted list of elements with the help of a linked table hierarchy connected to a subsequence of elements. Jump table allows to handle item lookups in an efficient way. A jump table is a probabilistic data structure, which means that it skips several elements of the entire list, hence the name. We can think of a jump table as an extended version of a linked table.</description>
    </item>
    
    <item>
      <title>The difference between the delete() method and deleteOnExit() method in Java.io.</title>
      <link>https://www.javai.net/post/202207/io-delete/</link>
      <pubDate>Mon, 18 Jul 2022 10:59:30 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202207/io-delete/</guid>
      <description>delete () method Deletes a file directly when the delete () method is called, regardless of whether the file exists or not, and executes it as soon as it is called.
deleteOnExit () method When the deleteOnExit () method is called, it is only equivalent to a declaration of deleteOnExit (), and the deleteOnExit () method is really called when the program is finished running and the JVM is terminated to achieve the delete operation.</description>
    </item>
    
    <item>
      <title>Why do double floating point operations lose precision?</title>
      <link>https://www.javai.net/post/202207/double-precision/</link>
      <pubDate>Mon, 18 Jul 2022 10:49:46 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202207/double-precision/</guid>
      <description>1. What is a floating point number? A floating point number is a type of data used by computers to represent decimals, using scientific notation. In java, double is a double-precision, 64-bit, floating-point number, and the default is 0.0d. float is a single-precision, 32-bit floating-point numbers, default is 0.0f.
Storing in memory
float sign bit (1 bit) exponent (8 bit) mantissa (23 bit) double sign bit (1 bit) exponent (11 bit) mantissa (52 bit)</description>
    </item>
    
    <item>
      <title>Seven of the best Java testing frameworks</title>
      <link>https://www.javai.net/post/202207/java-test-tools/</link>
      <pubDate>Mon, 11 Jul 2022 19:55:18 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202207/java-test-tools/</guid>
      <description>Java is one of the most popular programming languages today and is perennially in the top three of the most popular programming languages. A good java programmer cannot develop safer and more efficient code without knowledge of testing frameworks. One of the most important reasons for using these testing frameworks is to reduce the possibility of errors, increase development efficiency, and reduce development costs. In this article, we will introduce the most common testing frameworks used for Java testing.</description>
    </item>
    
    <item>
      <title>Java Proxy Pattern Explained</title>
      <link>https://www.javai.net/post/202207/java-proxy/</link>
      <pubDate>Mon, 11 Jul 2022 16:52:25 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202207/java-proxy/</guid>
      <description>1. Proxy Pattern The proxy pattern is a relatively well understood design pattern. Simply put we use a proxy object to replace access to the real object (real object), so that we can provide additional functional operations to extend the functionality of the target object without modifying the original target object.
The main purpose of the proxy pattern is to extend the functionality of the target object, for example, you can add some custom operations before and after the execution of a method of the target object.</description>
    </item>
    
    <item>
      <title>Java Geometry spatial geometry data processing applications</title>
      <link>https://www.javai.net/post/202207/java-geometry/</link>
      <pubDate>Mon, 11 Jul 2022 14:41:18 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202207/java-geometry/</guid>
      <description>First understand a few basic concepts that help to understand the application scenario of this article  Geographic Information System GIS   GIS (Geographic Information System or Geo-Information system, GIS) is sometimes referred to as a &amp;ldquo;geographic information system&amp;rdquo;. It is a specific and very important spatial information system. It is in the [computer] hardware and software system support, the whole or part of the [Earth] surface (including the atmosphere) space in the relevant [geographic] distribution [data], [storage], [management], [computing], [analysis], [show]and [description] of the technical system</description>
    </item>
    
    <item>
      <title>Java8 is going down? Jenkins announces support for Java 11 and above only</title>
      <link>https://www.javai.net/post/202207/java-jenkins-require-java8&#43;/</link>
      <pubDate>Sat, 02 Jul 2022 11:52:35 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202207/java-jenkins-require-java8&#43;/</guid>
      <description>Jenkins, an open source Devops tool, announced: Starting with the June 28th release of Jenkins 2.357 and the upcoming September LTS release, Jenkins requires Java 11 as a minimum.
Originally known as Hudson, Jenkins is a venerable continuous integration tool that has been in existence for over a decade. Since its inception in 2005, the Jenkins project has undergone several Java migrations. The current migration from Java 8 to Java 11 is consistent with the migration history in the Jenkins project.</description>
    </item>
    
    <item>
      <title>Java Multithreaded Concurrent FutureTask</title>
      <link>https://www.javai.net/post/202206/java-futuretask/</link>
      <pubDate>Wed, 29 Jun 2022 19:59:32 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202206/java-futuretask/</guid>
      <description>Java&amp;rsquo;s multithreading mechanism essentially accomplishes two things, asynchronous computation and concurrency. Concurrency is solved by a series of APIs that address thread safety; asynchronous computation, on the other hand, is commonly used with Runnable and Callable in conjunction with threads.
FutureTask is a cancelable asynchronous callable API based on the Runnable implementation.
Basic usage Future represents the result of an asynchronous computation, and is executed via the ExecutorService&amp;rsquo;s Future&amp;lt;? &amp;gt; submit(Runnable task) method of the ExecutorService, which is used as the return value.</description>
    </item>
    
    <item>
      <title>The essence and difference between IO and NIO in Java</title>
      <link>https://www.javai.net/post/202206/java-io-nio/</link>
      <pubDate>Tue, 28 Jun 2022 11:06:41 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202206/java-io-nio/</guid>
      <description>Introduction The full name of IO is input output, is the bridge between the java program and the outside world, IO refers to all the classes in the java.io package, they exist from java 1.0. NIO is called new IO, is the new generation of IO introduced in java 1.4.
What is the nature of IO? What is the difference between it and NIO? How do we learn IO and NIO?</description>
    </item>
    
    <item>
      <title>OpenJDK proposal will provide Java class file API</title>
      <link>https://www.javai.net/post/202206/java-class-api/</link>
      <pubDate>Fri, 24 Jun 2022 19:55:48 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202206/java-class-api/</guid>
      <description>The Java community is working on a Classfile API proposal that aims to provide an API for parsing, generating, and converting Java class files; initially as an internal replacement for the ASM in the JDK, and later as a public API. It is planned that ASM will eventually be removed from the JDK entirely.
The proposal notes that class file generation, parsing, and detection are ubiquitous in the Java ecosystem; many tools and libraries need to be able to handle class files, and frameworks often perform on-the-fly bytecode instrumentation, transformation, and generation.</description>
    </item>
    
    <item>
      <title>Building an infinite stream in java 8</title>
      <link>https://www.javai.net/post/202206/java-infinite-stream/</link>
      <pubDate>Thu, 16 Jun 2022 16:43:35 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202206/java-infinite-stream/</guid>
      <description>Introduction In java, we can convert a specific set into a stream, so in some cases, such as in a test environment, we need to construct a stream with a certain number of elements, how do we need to handle it?
Here we can construct an unlimited stream and then call the limit method to limit the number returned.
Basic use Let&amp;rsquo;s start with an example of using Stream.iterate to create an infinite Stream.</description>
    </item>
    
    <item>
      <title>Customizing parallelStream&#39;s thread pool</title>
      <link>https://www.javai.net/post/202206/java-parallel-stream-thread-pool/</link>
      <pubDate>Thu, 16 Jun 2022 15:36:40 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202206/java-parallel-stream-thread-pool/</guid>
      <description>Introduction By default, ForkJoinPool creates a thread for each processor, and parallelStream will use this shared thread pool to submit tasks if not specified.
So how do we handle a specific situation where we want to use a custom ForkJoinPool?
Common operations If we want to do an addition from 1 to 1000, we can use parallel stream like this.
1 2 3 4 5  List&amp;lt;Integer&amp;gt; integerList= IntStream.range(1,1000).boxed().collect(Collectors.toList()); ForkJoinPool customThreadPool = new ForkJoinPool(4); Integer total= integerList.</description>
    </item>
    
    <item>
      <title>Cloud Native Compiler - Java Cloud Compiler</title>
      <link>https://www.javai.net/post/202206/java-cloud-compiler/</link>
      <pubDate>Wed, 15 Jun 2022 20:45:51 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202206/java-cloud-compiler/</guid>
      <description>Azul has introduced a new cloud-native compiler, Java Cloud Compiler, which offloads Java JIT compilation from local systems to elastic resources, reducing the amount of resources needed to run applications and shortening the time to peak performance.
Understanding JIT and AOT The Java Runtime is a completely self-reliant system designed to run and improve code on a single system. The runtime works through just-in-time (JIT) compilation, using native resources that convert Java bytecode (JAR and class files) into native code to improve speed and memory.</description>
    </item>
    
    <item>
      <title>Java Virtual Threads</title>
      <link>https://www.javai.net/post/202206/java-virtual-thread/</link>
      <pubDate>Mon, 13 Jun 2022 19:20:24 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202206/java-virtual-thread/</guid>
      <description>Virtual threading is something I&amp;rsquo;m really excited about. It&amp;rsquo;s a long-awaited feature in the language and we&amp;rsquo;ve made very few attempts to implement it in the past, but it&amp;rsquo;s finally here and it&amp;rsquo;s been merged into Java 19. This means that it will be included as a preview feature and we will be able to use it as soon as JDK 19 is released.
Most of the content on the virtual (green) threads is written by non-Java developers, why is that?</description>
    </item>
    
    <item>
      <title>How to avoid memory leaks in java programs</title>
      <link>https://www.javai.net/post/202206/java-out-of-memory/</link>
      <pubDate>Sat, 11 Jun 2022 15:45:08 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202206/java-out-of-memory/</guid>
      <description>Although jvm has a garbage collection mechanism, if the program is written without paying attention to some specific rules, it can still lead to memory leaks in java programs, which may end up with OutOfMemory exceptions.
1. Causes of memory leaks in Java Objects in java are divided into 2 types in terms of usage, referenced and unreferenced. Garbage collection only recovers objects that are not referenced. Referenced objects, even if they are no longer used, are not recycled.</description>
    </item>
    
    <item>
      <title>ElasticSearch new version of JavaClient using the introduction</title>
      <link>https://www.javai.net/post/202206/elasticsearch-javaclient/</link>
      <pubDate>Sat, 11 Jun 2022 13:24:03 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202206/elasticsearch-javaclient/</guid>
      <description>The java client used by ElasticSearch before version 7.17 was the Java REST Client, but since version 7.17, the Java REST Client has been officially marked as deprecated and the new version of the Java Client is recommended. This article introduces the new version of the ElasticSearch Java Client&amp;rsquo;s basic usage. The specific code reference Example project.
I. Overview Elasticsearch 7.17 version of the new Java API Client has the following advantages.</description>
    </item>
    
    <item>
      <title>Java virtual thread (LOOM) and thread fairness</title>
      <link>https://www.javai.net/post/202205/java-virtual-thread-fair/</link>
      <pubDate>Tue, 31 May 2022 23:43:35 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202205/java-virtual-thread-fair/</guid>
      <description>Project Loom ( JEP 425 ) is probably one of the most anticipated additions to Java ever. Its implementation of virtual threading (or &amp;ldquo;green threading&amp;rdquo;) ensures that developers can create highly concurrent applications, such as those with hundreds of thousands of open HTTP connections, adhering to the well-known thread-per-request programming model without resorting to less familiar and often more complex reactive methods.
Only recently, after several years of effort, has Loom been merged into the main line of the OpenJDK and made available as a preview feature in the latest Java 19 early access release.</description>
    </item>
    
  </channel>
</rss>

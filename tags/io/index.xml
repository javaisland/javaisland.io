<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>io on JavaIsland</title>
    <link>https://www.javai.net/tags/io/</link>
    <description>Recent content in io on JavaIsland</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 18 Jul 2022 10:59:30 +0800</lastBuildDate><atom:link href="https://www.javai.net/tags/io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The difference between the delete() method and deleteOnExit() method in Java.io.</title>
      <link>https://www.javai.net/post/202207/io-delete/</link>
      <pubDate>Mon, 18 Jul 2022 10:59:30 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202207/io-delete/</guid>
      <description>delete () method Deletes a file directly when the delete () method is called, regardless of whether the file exists or not, and executes it as soon as it is called.
deleteOnExit () method When the deleteOnExit () method is called, it is only equivalent to a declaration of deleteOnExit (), and the deleteOnExit () method is really called when the program is finished running and the JVM is terminated to achieve the delete operation.</description>
    </item>
    
    <item>
      <title>The essence and difference between IO and NIO in Java</title>
      <link>https://www.javai.net/post/202206/java-io-nio/</link>
      <pubDate>Tue, 28 Jun 2022 11:06:41 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202206/java-io-nio/</guid>
      <description>Introduction The full name of IO is input output, is the bridge between the java program and the outside world, IO refers to all the classes in the java.io package, they exist from java 1.0. NIO is called new IO, is the new generation of IO introduced in java 1.4.
What is the nature of IO? What is the difference between it and NIO? How do we learn IO and NIO?</description>
    </item>
    
    <item>
      <title>Practical application scenarios for pipeline stream</title>
      <link>https://www.javai.net/post/202204/piped-stream/</link>
      <pubDate>Sun, 03 Apr 2022 15:17:30 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/piped-stream/</guid>
      <description>Preface PipedInputStream and PipedOutputStream are designed to solve cross-thread byte data transfers. They always come in pairs and can only be used on two different threads, using piped input and output streams in one thread can cause deadlocks. In some business scenarios, using pipeline streams will increase the speed of file uploads and reduce CPU and IO overhead, this is very practical, so this article talks about Practical application scenarios for pipeline stream.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>virtual threads on JavaIsland</title>
    <link>https://www.javai.net/tags/virtual-threads/</link>
    <description>Recent content in virtual threads on JavaIsland</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 31 May 2022 23:43:35 +0800</lastBuildDate><atom:link href="https://www.javai.net/tags/virtual-threads/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java virtual thread (LOOM) and thread fairness</title>
      <link>https://www.javai.net/post/202205/java-virtual-thread-fair/</link>
      <pubDate>Tue, 31 May 2022 23:43:35 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202205/java-virtual-thread-fair/</guid>
      <description>Project Loom ( JEP 425 ) is probably one of the most anticipated additions to Java ever. Its implementation of virtual threading (or &amp;ldquo;green threading&amp;rdquo;) ensures that developers can create highly concurrent applications, such as those with hundreds of thousands of open HTTP connections, adhering to the well-known thread-per-request programming model without resorting to less familiar and often more complex reactive methods.
Only recently, after several years of effort, has Loom been merged into the main line of the OpenJDK and made available as a preview feature in the latest Java 19 early access release.</description>
    </item>
    
    <item>
      <title>Java Virtual Threads Explained</title>
      <link>https://www.javai.net/post/202204/java-virtual-threads-explained/</link>
      <pubDate>Fri, 15 Apr 2022 20:59:32 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-virtual-threads-explained/</guid>
      <description>Many languages have technologies like virtual threads, such as Go, C#, Erlang, Lua, etc, which they call concurrent threads. Whether they are virtual threads or concurrent threads, they are all lightweight threads that aim to improve concurrency. This section details the Java platform&amp;rsquo;s virtual threads technology, JEP 425: Virtual Threads (Preview).
The Java platform plans to introduce virtual threads that will significantly reduce the effort of writing, maintaining, and observing high-throughput concurrent applications.</description>
    </item>
    
    <item>
      <title>Java introduces preview virtual threads</title>
      <link>https://www.javai.net/post/202204/java-virtual-threads/</link>
      <pubDate>Fri, 08 Apr 2022 13:14:35 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-virtual-threads/</guid>
      <description>OpenJDK&amp;rsquo;s JEP 425: Virtual Threads (Preview) feature proposal shows that the Java platform will introduce the virtual threads feature. Virtual threads are lightweight threads that can significantly reduce the effort of writing, maintaining, and observing high-throughput concurrent applications.
Java developers have always relied on threads as the building blocks of concurrent server applications, where statements in each method are executed within a thread, and each thread provides a stack to store local variables and coordinate method calls, as well as context trapping when errors are reported.</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>memory on JavaIsland</title>
    <link>https://www.javai.net/tags/memory/</link>
    <description>Recent content in memory on JavaIsland</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 11 Jun 2022 15:45:08 +0800</lastBuildDate><atom:link href="https://www.javai.net/tags/memory/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to avoid memory leaks in java programs</title>
      <link>https://www.javai.net/post/202206/java-out-of-memory/</link>
      <pubDate>Sat, 11 Jun 2022 15:45:08 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202206/java-out-of-memory/</guid>
      <description>Although jvm has a garbage collection mechanism, if the program is written without paying attention to some specific rules, it can still lead to memory leaks in java programs, which may end up with OutOfMemory exceptions.
1. Causes of memory leaks in Java Objects in java are divided into 2 types in terms of usage, referenced and unreferenced. Garbage collection only recovers objects that are not referenced. Referenced objects, even if they are no longer used, are not recycled.</description>
    </item>
    
  </channel>
</rss>

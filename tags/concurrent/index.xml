<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>concurrent on JavaIsland</title>
    <link>https://www.javai.net/tags/concurrent/</link>
    <description>Recent content in concurrent on JavaIsland</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 01 Apr 2022 14:10:49 +0800</lastBuildDate><atom:link href="https://www.javai.net/tags/concurrent/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Thread pool rejection policy</title>
      <link>https://www.javai.net/post/202204/thread-pool-rejection-strategy/</link>
      <pubDate>Fri, 01 Apr 2022 14:10:49 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/thread-pool-rejection-strategy/</guid>
      <description>Preface When it comes to java thread pools nothing is more familiar than the ExecutorService interface. jdk1.5 adds java.util.concurrent package under this api, which greatly simplifies the development of multi-threaded code. Whether you use FixedThreadPool or CachedThreadPool the implementation behind it is ThreadPoolExecutor. threadPoolExecutor is a typical product of cache pooling design, because the pool has a size, when the pool volume is not enough to carry, it involves a rejection policy.</description>
    </item>
    
  </channel>
</rss>

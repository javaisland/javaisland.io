<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>threadlocal on JavaIsland</title>
    <link>https://www.javai.net/tags/threadlocal/</link>
    <description>Recent content in threadlocal on JavaIsland</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 17 Apr 2022 13:47:38 +0800</lastBuildDate><atom:link href="https://www.javai.net/tags/threadlocal/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The use of ThreadLocal in java</title>
      <link>https://www.javai.net/post/202204/java-threadlocal-use/</link>
      <pubDate>Sun, 17 Apr 2022 13:47:38 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-threadlocal-use/</guid>
      <description>Preface ThreadLocal is mainly used to store data for the current thread, this data is only accessible by the current thread.
When defining a ThreadLocal, we can also define specific types of objects stored in the ThreadLocal.
1  ThreadLocal&amp;lt;Integer&amp;gt; threadLocalValue = new ThreadLocal&amp;lt;&amp;gt;();   Above we have defined a ThreadLocal object that stores an Integer.
To store and get the object in ThreadLocal is also very simple, using get() and set().</description>
    </item>
    
    <item>
      <title>A scenario using Threadlocal to solve concurrency and efficiency problems</title>
      <link>https://www.javai.net/post/202203/threadlocal-use/</link>
      <pubDate>Wed, 30 Mar 2022 20:39:02 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202203/threadlocal-use/</guid>
      <description>ThreadLocal is a tool provided by JDK 1.2, a tool mainly to solve the problem of sharing resources under multi-threaded, In the next section, we will analyze how ThreadLocal can be used to solve concurrency problems and improve code efficiency in development, starting from the definition of ThreadLocal and its application scenarios.
Scenario 1, ThreadLocal is used to save objects that are unique to each thread, creating a copy for each thread so that each thread can modify the copy it owns without affecting the other threads&amp;rsquo; copies, ensuring thread safety.</description>
    </item>
    
  </channel>
</rss>

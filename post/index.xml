<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on JavaIsland</title>
    <link>https://www.javai.net/post/</link>
    <description>Recent content in Posts on JavaIsland</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 02 Jul 2022 11:52:35 +0800</lastBuildDate><atom:link href="https://www.javai.net/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java8 is going down? Jenkins announces support for Java 11 and above only</title>
      <link>https://www.javai.net/post/202207/java-jenkins-require-java8&#43;/</link>
      <pubDate>Sat, 02 Jul 2022 11:52:35 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202207/java-jenkins-require-java8&#43;/</guid>
      <description>Jenkins, an open source Devops tool, announced: Starting with the June 28th release of Jenkins 2.357 and the upcoming September LTS release, Jenkins requires Java 11 as a minimum.
Originally known as Hudson, Jenkins is a venerable continuous integration tool that has been in existence for over a decade. Since its inception in 2005, the Jenkins project has undergone several Java migrations. The current migration from Java 8 to Java 11 is consistent with the migration history in the Jenkins project.</description>
    </item>
    
    <item>
      <title>Java Multithreaded Concurrent FutureTask</title>
      <link>https://www.javai.net/post/202206/java-futuretask/</link>
      <pubDate>Wed, 29 Jun 2022 19:59:32 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202206/java-futuretask/</guid>
      <description>Java&amp;rsquo;s multithreading mechanism essentially accomplishes two things, asynchronous computation and concurrency. Concurrency is solved by a series of APIs that address thread safety; asynchronous computation, on the other hand, is commonly used with Runnable and Callable in conjunction with threads.
FutureTask is a cancelable asynchronous callable API based on the Runnable implementation.
Basic usage Future represents the result of an asynchronous computation, and is executed via the ExecutorService&amp;rsquo;s Future&amp;lt;? &amp;gt; submit(Runnable task) method of the ExecutorService, which is used as the return value.</description>
    </item>
    
    <item>
      <title>The essence and difference between IO and NIO in Java</title>
      <link>https://www.javai.net/post/202206/java-io-nio/</link>
      <pubDate>Tue, 28 Jun 2022 11:06:41 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202206/java-io-nio/</guid>
      <description>Introduction The full name of IO is input output, is the bridge between the java program and the outside world, IO refers to all the classes in the java.io package, they exist from java 1.0. NIO is called new IO, is the new generation of IO introduced in java 1.4.
What is the nature of IO? What is the difference between it and NIO? How do we learn IO and NIO?</description>
    </item>
    
    <item>
      <title>OpenJDK proposal will provide Java class file API</title>
      <link>https://www.javai.net/post/202206/java-class-api/</link>
      <pubDate>Fri, 24 Jun 2022 19:55:48 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202206/java-class-api/</guid>
      <description>The Java community is working on a Classfile API proposal that aims to provide an API for parsing, generating, and converting Java class files; initially as an internal replacement for the ASM in the JDK, and later as a public API. It is planned that ASM will eventually be removed from the JDK entirely.
The proposal notes that class file generation, parsing, and detection are ubiquitous in the Java ecosystem; many tools and libraries need to be able to handle class files, and frameworks often perform on-the-fly bytecode instrumentation, transformation, and generation.</description>
    </item>
    
    <item>
      <title>Building an infinite stream in java 8</title>
      <link>https://www.javai.net/post/202206/java-infinite-stream/</link>
      <pubDate>Thu, 16 Jun 2022 16:43:35 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202206/java-infinite-stream/</guid>
      <description>Introduction In java, we can convert a specific set into a stream, so in some cases, such as in a test environment, we need to construct a stream with a certain number of elements, how do we need to handle it?
Here we can construct an unlimited stream and then call the limit method to limit the number returned.
Basic use Let&amp;rsquo;s start with an example of using Stream.iterate to create an infinite Stream.</description>
    </item>
    
    <item>
      <title>Customizing parallelStream&#39;s thread pool</title>
      <link>https://www.javai.net/post/202206/java-parallel-stream-thread-pool/</link>
      <pubDate>Thu, 16 Jun 2022 15:36:40 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202206/java-parallel-stream-thread-pool/</guid>
      <description>Introduction By default, ForkJoinPool creates a thread for each processor, and parallelStream will use this shared thread pool to submit tasks if not specified.
So how do we handle a specific situation where we want to use a custom ForkJoinPool?
Common operations If we want to do an addition from 1 to 1000, we can use parallel stream like this.
1 2 3 4 5  List&amp;lt;Integer&amp;gt; integerList= IntStream.range(1,1000).boxed().collect(Collectors.toList()); ForkJoinPool customThreadPool = new ForkJoinPool(4); Integer total= integerList.</description>
    </item>
    
    <item>
      <title>Cloud Native Compiler - Java Cloud Compiler</title>
      <link>https://www.javai.net/post/202206/java-cloud-compiler/</link>
      <pubDate>Wed, 15 Jun 2022 20:45:51 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202206/java-cloud-compiler/</guid>
      <description>Azul has introduced a new cloud-native compiler, Java Cloud Compiler, which offloads Java JIT compilation from local systems to elastic resources, reducing the amount of resources needed to run applications and shortening the time to peak performance.
Understanding JIT and AOT The Java Runtime is a completely self-reliant system designed to run and improve code on a single system. The runtime works through just-in-time (JIT) compilation, using native resources that convert Java bytecode (JAR and class files) into native code to improve speed and memory.</description>
    </item>
    
    <item>
      <title>Java Virtual Threads</title>
      <link>https://www.javai.net/post/202206/java-virtual-thread/</link>
      <pubDate>Mon, 13 Jun 2022 19:20:24 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202206/java-virtual-thread/</guid>
      <description>Virtual threading is something I&amp;rsquo;m really excited about. It&amp;rsquo;s a long-awaited feature in the language and we&amp;rsquo;ve made very few attempts to implement it in the past, but it&amp;rsquo;s finally here and it&amp;rsquo;s been merged into Java 19. This means that it will be included as a preview feature and we will be able to use it as soon as JDK 19 is released.
Most of the content on the virtual (green) threads is written by non-Java developers, why is that?</description>
    </item>
    
    <item>
      <title>How to avoid memory leaks in java programs</title>
      <link>https://www.javai.net/post/202206/java-out-of-memory/</link>
      <pubDate>Sat, 11 Jun 2022 15:45:08 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202206/java-out-of-memory/</guid>
      <description>Although jvm has a garbage collection mechanism, if the program is written without paying attention to some specific rules, it can still lead to memory leaks in java programs, which may end up with OutOfMemory exceptions.
1. Causes of memory leaks in Java Objects in java are divided into 2 types in terms of usage, referenced and unreferenced. Garbage collection only recovers objects that are not referenced. Referenced objects, even if they are no longer used, are not recycled.</description>
    </item>
    
    <item>
      <title>ElasticSearch new version of JavaClient using the introduction</title>
      <link>https://www.javai.net/post/202206/elasticsearch-javaclient/</link>
      <pubDate>Sat, 11 Jun 2022 13:24:03 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202206/elasticsearch-javaclient/</guid>
      <description>The java client used by ElasticSearch before version 7.17 was the Java REST Client, but since version 7.17, the Java REST Client has been officially marked as deprecated and the new version of the Java Client is recommended. This article introduces the new version of the ElasticSearch Java Client&amp;rsquo;s basic usage. The specific code reference Example project.
I. Overview Elasticsearch 7.17 version of the new Java API Client has the following advantages.</description>
    </item>
    
    <item>
      <title>Java virtual thread (LOOM) and thread fairness</title>
      <link>https://www.javai.net/post/202205/java-virtual-thread-fair/</link>
      <pubDate>Tue, 31 May 2022 23:43:35 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202205/java-virtual-thread-fair/</guid>
      <description>Project Loom ( JEP 425 ) is probably one of the most anticipated additions to Java ever. Its implementation of virtual threading (or &amp;ldquo;green threading&amp;rdquo;) ensures that developers can create highly concurrent applications, such as those with hundreds of thousands of open HTTP connections, adhering to the well-known thread-per-request programming model without resorting to less familiar and often more complex reactive methods.
Only recently, after several years of effort, has Loom been merged into the main line of the OpenJDK and made available as a preview feature in the latest Java 19 early access release.</description>
    </item>
    
    <item>
      <title>Java introduces static images to solve problems like slow running</title>
      <link>https://www.javai.net/post/202205/java-oracle-leyden/</link>
      <pubDate>Thu, 26 May 2022 13:40:53 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202205/java-oracle-leyden/</guid>
      <description>In a recent social media post, Mark Reinhold, Chief Architect of Oracle&amp;rsquo;s Java Platform Group, officially announced the launch of the &amp;ldquo;Leyden&amp;rdquo; project. The project is said to have been approved and will alleviate slow startup and performance issues by introducing &amp;ldquo;static images&amp;rdquo; on the Java platform, designed to accelerate the creation of Java businesses.
It is understood that the &amp;ldquo;Leyden&amp;rdquo; project was first proposed around May 2020 and has been discussed for more than 2 years now.</description>
    </item>
    
    <item>
      <title>Use of CyclicBarrier in java concurrency</title>
      <link>https://www.javai.net/post/202205/java-cyclicbarrier-use/</link>
      <pubDate>Thu, 12 May 2022 13:48:54 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202205/java-cyclicbarrier-use/</guid>
      <description>Introduction CyclicBarrier is a thread-safe component introduced in java 5. It has the concept of a barrier, which is used to wait for all threads to finish executing before performing a specific operation.
If we have many threads and each thread computes some data, then we need to wait for all the threads to finish executing and then add up the data computed by each thread to the final result, then we can use CyclicBarrier.</description>
    </item>
    
    <item>
      <title>Use of CountDownLatch in java concurrency</title>
      <link>https://www.javai.net/post/202205/java-countdownlatch-use/</link>
      <pubDate>Thu, 12 May 2022 13:34:16 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202205/java-countdownlatch-use/</guid>
      <description>Introduction In java concurrency, it is very important to control access to shared variables, sometimes we also want to control the order of execution of concurrent threads, for example: wait for all threads to finish executing before executing another thread, or wait for all threads to be ready before starting the execution of all threads, This time we can use CountDownLatch.
CountDownLatch contains a counter that is placed in the QueuedSynchronizer.</description>
    </item>
    
    <item>
      <title>Java stream common operations on streams</title>
      <link>https://www.javai.net/post/202205/java-stream-use/</link>
      <pubDate>Sat, 07 May 2022 17:04:19 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202205/java-stream-use/</guid>
      <description>Introduction As we all know, starting from Java8, jdk has added a new Stream class to complement the collection class.
Stream provides a higher-order abstraction of Java collection operations and expressions using an intuitive way similar to querying data from a database with SQL statements.
This style treats the collection of elements to be processed as a stream, which travels through the pipeline and can be processed at the nodes of the pipeline, such as filtering, sorting, aggregating, etc.</description>
    </item>
    
    <item>
      <title>High-performance collections EnumMap and EnumSet</title>
      <link>https://www.javai.net/post/202204/java-enum-collection/</link>
      <pubDate>Tue, 26 Apr 2022 15:25:32 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-enum-collection/</guid>
      <description>This article introduces EnumMap and EnumSet, which is a collection class under the java.util package.
The Map and Set structures are especially used in our daily work, and often used to store data or pass parameters, but there is no way to control the data setting of Map, we have no idea what kind of data others will put into it, or if the type and number of data Key of our Map is fixed in some scenarios, then in this case How can we improve the security and performance of the system?</description>
    </item>
    
    <item>
      <title>Java Discovers Annual Encryption Vulnerability</title>
      <link>https://www.javai.net/post/202204/java-encryption-vulnerability/</link>
      <pubDate>Tue, 26 Apr 2022 13:44:51 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-encryption-vulnerability/</guid>
      <description>Recently, security researcher Khaled Nassar made public on GitHub the PoC code for a newly disclosed digital signature bypass vulnerability in Java, tracked as CVE-2022-21449.
The vulnerability is known to have been discovered by Neil Madden, a researcher at security consulting firm ForgeRock, in November of last year, and was notified to Oracle the same day.
Although Oracle gave the vulnerability a CVSS rating of 7.5, ForgeRock said they had privately disclosed the vulnerability when it was first discovered and rated the vulnerability a 10 on the CVSS.</description>
    </item>
    
    <item>
      <title>JDK 19 / Java 19 has proposed two features</title>
      <link>https://www.javai.net/post/202204/java-jdk19-proposed/</link>
      <pubDate>Mon, 25 Apr 2022 16:01:23 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-jdk19-proposed/</guid>
      <description>JDK 18/Java 18 has been released last month, according to the plan JDK 19 will be released in September this year, a few days ago the official proposed two features that will be released in the next version. One is the Vector API, and the other is a port of the JDK to RISC-V. The former Vector API is an API that expresses vector computation and will be incubated for the fourth time in the next Java release; the latter proposes a feature to port the JDK to the open source Linux/RISC-V instruction set architecture (ISA).</description>
    </item>
    
    <item>
      <title>Thread-Affinity for CPU-bound threads</title>
      <link>https://www.javai.net/post/202204/java-thread-affinity/</link>
      <pubDate>Sun, 24 Apr 2022 14:49:37 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-thread-affinity/</guid>
      <description>Introduction In modern computer systems, there can be multiple CPUs, and each CPU can have multiple cores. In order to take full advantage of the capabilities of modern CPUs, JAVA introduced multithreading, where different threads can run on different CPUs or different CPU cores at the same time. However, for JAVA programmers it is possible to control how many threads are created, but which CPU the threads are running on is generally difficult to know.</description>
    </item>
    
    <item>
      <title>Oracle fixes Java annual encryption vulnerability affecting Java 15 and above</title>
      <link>https://www.javai.net/post/202204/java-oracle-crypto-bug/</link>
      <pubDate>Fri, 22 Apr 2022 10:43:15 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-oracle-crypto-bug/</guid>
      <description>Oracle pushed out a security update yesterday to fix a vulnerability that allowed attackers to forge certain types of SSL certificates and handshakes, two-factor authentication information, and authorization credentials generated by a range of widely used open standards. This allows an attacker to easily digitally sign files and other data.
This vulnerability affects the implementation of ECDSA (Elliptic Curve Digital Signature Algorithm) in Java 15 and above. ECDSA is an algorithm that uses elliptic curve cryptography principles to digitally authenticate messages.</description>
    </item>
    
  </channel>
</rss>

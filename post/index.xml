<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on JavaIsland</title>
    <link>https://www.javai.net/post/</link>
    <description>Recent content in Posts on JavaIsland</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 19 Apr 2022 15:11:02 +0800</lastBuildDate><atom:link href="https://www.javai.net/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AbstractQueuedSynchronizer implementation principle - 2</title>
      <link>https://www.javai.net/post/202204/java-aqs-principle-2/</link>
      <pubDate>Tue, 19 Apr 2022 15:11:02 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-aqs-principle-2/</guid>
      <description>Preface In the previous articleAbstractQueuedSynchronizer implementation principle - the first part, we explained the acquisition and release of exclusive synchronization state in AbstractQueuedSynchronizer, and here we start to explain the acquisition and release of shared synchronization state in AbstractQueuedSynchronizer.
Shared Synchronous State Acquisition and Release Shared lock as the name implies is that multiple threads can share a lock, use acquireShared in the synchronizer to get the shared lock (synchronous state), the source code of the method is as follows.</description>
    </item>
    
    <item>
      <title>AbstractQueuedSynchronizer implementation principle - 1</title>
      <link>https://www.javai.net/post/202204/java-aqs-principle-1/</link>
      <pubDate>Tue, 19 Apr 2022 14:29:23 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-aqs-principle-1/</guid>
      <description>Preface AbstractQueuedSynchronizer is the basic framework for implementing concurrency tools in the JDK, and a deeper understanding of it will help us to better use its features and related tools. We hope you will read this article carefully and gain something from it.
In Java, access to shared resources by multiple threads is controlled by lock. We know that the lock function can be implemented by the synchronized keyword, which can implicitly acquire locks, that is, we do not need to care about the process of acquiring and releasing locks by using this keyword, but while it provides convenience, it also means that its flexibility is reduced.</description>
    </item>
    
    <item>
      <title>Simple use of the Atomic class</title>
      <link>https://www.javai.net/post/202204/java-atomic-class/</link>
      <pubDate>Mon, 18 Apr 2022 17:14:34 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-atomic-class/</guid>
      <description>Problem Background In a multi-threaded environment, the most common problem we encounter is synchronizing the values of variables. Since variables need to be shared across multiple threads, we must need to employ some synchronization mechanism to control them.
From the previous article we know that the Lock mechanism can be used, and of course, the Atomic class we are talking about today.
Here we will introduce each of the two ways.</description>
    </item>
    
    <item>
      <title>Use of join in java</title>
      <link>https://www.javai.net/post/202204/java-join-use/</link>
      <pubDate>Mon, 18 Apr 2022 16:24:46 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-join-use/</guid>
      <description>Introduction join() is a method we often use in java that sets the current thread to the WAITTING state and then waits for the calling thread to finish executing or be interrupted.
Definition join() is a method defined in Thread, let&amp;rsquo;s look at his definition.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  /** * Waits for this thread to die.</description>
    </item>
    
    <item>
      <title>The life cycle of threads in java</title>
      <link>https://www.javai.net/post/202204/java-thread-life-cycle/</link>
      <pubDate>Mon, 18 Apr 2022 15:55:37 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-thread-life-cycle/</guid>
      <description>Introduction Threads is a frequently used technology in java, this article will explain in detail the life cycle of threads in java, I hope you can give some help.
The state of Thread in java There are six states of Thread in java, which are.
 NEW - newly created Thread, has not yet started execution RUNNABLE - Thread in runnable state, including ready to run and running. BLOCKED - Threads that are waiting for a resource lock WAITING - A thread that is waiting indefinitely for other threads to perform a specific operation TIMED_WAITING - Waiting for a certain amount of time for other threads to perform a specific operation TERMINATED - the thread has finished executing  We can visualize this in a diagram.</description>
    </item>
    
    <item>
      <title>The use of ThreadLocal in java</title>
      <link>https://www.javai.net/post/202204/java-threadlocal-use/</link>
      <pubDate>Sun, 17 Apr 2022 13:47:38 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-threadlocal-use/</guid>
      <description>Preface ThreadLocal is mainly used to store data for the current thread, this data is only accessible by the current thread.
When defining a ThreadLocal, we can also define specific types of objects stored in the ThreadLocal.
1  ThreadLocal&amp;lt;Integer&amp;gt; threadLocalValue = new ThreadLocal&amp;lt;&amp;gt;();   Above we have defined a ThreadLocal object that stores an Integer.
To store and get the object in ThreadLocal is also very simple, using get() and set().</description>
    </item>
    
    <item>
      <title>The difference between Runnable and Callable in java</title>
      <link>https://www.javai.net/post/202204/java-runnable-callable/</link>
      <pubDate>Sun, 17 Apr 2022 13:40:15 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-runnable-callable/</guid>
      <description>Preface In java&amp;rsquo;s multi-threaded development Runnable has always been the core of multi-threading, and Callable is an enhanced version of java 1.5 added in.
In this article, we will explore the differences between Runnable and Callable in detail.
Operation mechanism First look at the interface definition of Runnable and Callable:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  @FunctionalInterface public interface Runnable { /** * When an object implementing interface &amp;lt;code&amp;gt;Runnable&amp;lt;/code&amp;gt; is used * to create a thread, starting the thread causes the object&amp;#39;s * &amp;lt;code&amp;gt;run&amp;lt;/code&amp;gt; method to be called in that separately executing * thread.</description>
    </item>
    
    <item>
      <title>The use of ExecutorService in java concurrency</title>
      <link>https://www.javai.net/post/202204/java-executorservice-use/</link>
      <pubDate>Sun, 17 Apr 2022 13:29:57 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-executorservice-use/</guid>
      <description>Preface ExecutorService is a framework for asynchronous execution in java. By using ExecutorService you can easily create a multi-threaded execution environment.
This article will explain in detail the specific use of ExecutorService.
Creating an ExecutorService Generally speaking, there are two ways to create an ExecutorService.
The first way is to use the factory class methods in Executors, for example.
1  ExecutorService executor = Executors.newFixedThreadPool(10);   In addition to the newFixedThreadPool method, Executors contains a number of methods to create an ExecutorService.</description>
    </item>
    
    <item>
      <title>Java Class File Format Analysis</title>
      <link>https://www.javai.net/post/202204/java-class-file-format-analysis/</link>
      <pubDate>Sat, 16 Apr 2022 19:44:15 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-class-file-format-analysis/</guid>
      <description>Preface Learn jvm word code, you need to understand the way class is composed, this article explains the process of parsing the class file format in java method, I hope it can help you.
Class file specification The code that is compiled and executed by the Java virtual machine uses a platform-neutral (hardware- and operating system-independent). It is often (but not always) stored as a file, so this format is called the Class file format.</description>
    </item>
    
    <item>
      <title>Java Virtual Threads Explained</title>
      <link>https://www.javai.net/post/202204/java-virtual-threads-explained/</link>
      <pubDate>Fri, 15 Apr 2022 20:59:32 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-virtual-threads-explained/</guid>
      <description>Many languages have technologies like virtual threads, such as Go, C#, Erlang, Lua, etc, which they call concurrent threads. Whether they are virtual threads or concurrent threads, they are all lightweight threads that aim to improve concurrency. This section details the Java platform&amp;rsquo;s virtual threads technology, JEP 425: Virtual Threads (Preview).
The Java platform plans to introduce virtual threads that will significantly reduce the effort of writing, maintaining, and observing high-throughput concurrent applications.</description>
    </item>
    
    <item>
      <title>The use of Future in java</title>
      <link>https://www.javai.net/post/202204/java-future-use/</link>
      <pubDate>Tue, 12 Apr 2022 17:24:00 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-future-use/</guid>
      <description>The use of Future in java Future is an interface introduced in java 1.5 that can be used to get asynchronous results easily. This article will explain how to use Future through specific examples.
Creating Future As mentioned above, Future represents the result of asynchronous execution, which means that when the asynchronous execution is finished, the returned result will be saved in Future.
So when do we use Future? Generally speaking, when we execute a long-running task, using Future allows us to temporarily deal with other tasks, and then return the result when the long task is finished.</description>
    </item>
    
    <item>
      <title>Better use of Java thread pool</title>
      <link>https://www.javai.net/post/202204/thread-pool-tips/</link>
      <pubDate>Mon, 11 Apr 2022 15:57:29 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/thread-pool-tips/</guid>
      <description>Introduction This article combines the JUC package provided by Doug Lea in JDK1.5 to understand the use of thread pools from the setting of thread pool size parameters, the creation of work threads, the recycling of idle threads, the use of blocking queues, task rejection strategies, thread pool Hook and other aspects, which involves some details including the choice of different parameters, different queues, different rejection strategies, the resulting The details include the different parameters, the different queues, the choice of different rejection strategies, the resulting impact and behavior, and for better use of the thread pool.</description>
    </item>
    
    <item>
      <title>Technology Trends Java Teams Should Watch in 2022</title>
      <link>https://www.javai.net/post/202204/java-2022-trends/</link>
      <pubDate>Mon, 11 Apr 2022 15:33:15 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-2022-trends/</guid>
      <description>Java is evolving quickly, and with potential changes to the OpenJDK release cycle, it may accelerate even further. For people like Michael Rasmussen, JRebel development lead at Perforce, keeping up with these changes and understanding their impact on development; creating features that resonate with the Java development community, keeping applications up to date with the latest versions of popular Java technologies, and developing new features, improvements, and integrations for JRebel is critical.</description>
    </item>
    
    <item>
      <title>Analysis of connection pooling principles through HiKariCP</title>
      <link>https://www.javai.net/post/202204/java-hikaricp/</link>
      <pubDate>Mon, 11 Apr 2022 13:54:22 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-hikaricp/</guid>
      <description>Design and Principle The base case HiKariCP as the default connection pool of SpringBoot2 framework, claimed to be the fastest running connection pool, database connection pool and the previous two mentioned thread pool and object pool, from the principle of design are based on the pooling idea, only in the implementation of their own characteristics; first or see the basic case of HiKariCP usage.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  import com.</description>
    </item>
    
    <item>
      <title>Synchronized keywords in java concurrency</title>
      <link>https://www.javai.net/post/202204/java-synchronized/</link>
      <pubDate>Mon, 11 Apr 2022 10:26:19 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-synchronized/</guid>
      <description>Introduction In a multi-threaded environment, we often encounter resource competition, such as multiple threads going to modify the same shared variable at the same time, it is necessary to perform some processing of the resource access method to ensure that only one thread accesses it at the same time.
Java provides the synchronized keyword to facilitate us to achieve the above operation.
Why synchronized Let&amp;rsquo;s take an example where we create a class that provides a setSum method.</description>
    </item>
    
    <item>
      <title>Difference between wait and sleep in java</title>
      <link>https://www.javai.net/post/202204/java-wait-sleep/</link>
      <pubDate>Sun, 10 Apr 2022 22:19:20 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-wait-sleep/</guid>
      <description>Introduction In this post, we will discuss the difference between wait() and sleep() methods in java. And discuss how to use these two methods.
Difference between wait and sleep wait() is a native method defined in Object.
1  public final native void wait(long timeout) throws InterruptedException;   So every instance of the class can call this method. wait() can only be called in a synchronized block. It will release the lock put on the object when it is synchronized.</description>
    </item>
    
    <item>
      <title>Advanced Usage of java - Function in JNA</title>
      <link>https://www.javai.net/post/202204/java-jna-function/</link>
      <pubDate>Sun, 10 Apr 2022 21:59:57 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-jna-function/</guid>
      <description>Introduction In JNA, in order to map with native functions, we can have two mapping methods, the first one is interface mapping and the second one is direct mapping. Although the two approaches are different, in the specific method mapping, we both need to define a method in JAVA that maps to the native method..
This JAVA mapping is a function in JNA, and by using a function object, we can achieve some very powerful functionality.</description>
    </item>
    
    <item>
      <title>Java Zombie Processes Continued</title>
      <link>https://www.javai.net/post/202204/java-zombie-processes-continued/</link>
      <pubDate>Sat, 09 Apr 2022 15:26:12 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-zombie-processes-continued/</guid>
      <description>In a previous article, I mentioned the problem of Java program containers generating a lot of zombie processes. Today I ran into it again, but in a different way.
The zombie processes are also generated by a bash script, but this script is executed in the K8S readinessProbe and livenessProbe, not by the java program itself.
Let&amp;rsquo;s look at some failure diagrams.
You can see that there are many timeout processes that are not cleaned up after execution.</description>
    </item>
    
    <item>
      <title>Java introduces preview virtual threads</title>
      <link>https://www.javai.net/post/202204/java-virtual-threads/</link>
      <pubDate>Fri, 08 Apr 2022 13:14:35 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/java-virtual-threads/</guid>
      <description>OpenJDK&amp;rsquo;s JEP 425: Virtual Threads (Preview) feature proposal shows that the Java platform will introduce the virtual threads feature. Virtual threads are lightweight threads that can significantly reduce the effort of writing, maintaining, and observing high-throughput concurrent applications.
Java developers have always relied on threads as the building blocks of concurrent server applications, where statements in each method are executed within a thread, and each thread provides a stack to store local variables and coordinate method calls, as well as context trapping when errors are reported.</description>
    </item>
    
    <item>
      <title>Application of Volatile</title>
      <link>https://www.javai.net/post/202204/volatile-application/</link>
      <pubDate>Thu, 07 Apr 2022 16:01:20 +0800</pubDate>
      
      <guid>https://www.javai.net/post/202204/volatile-application/</guid>
      <description>Memory Visibility Since the Java Memory Model (JMM) states that all variables are stored in main memory, and each thread has its own working memory (cache).
When a thread is working, it needs to copy the data from the main memory to the working memory. This way, any operation on the data is based on the working memory (which is more efficient) and cannot directly manipulate the data in the main memory or the working memory of other threads, and then flush the updated data to the main memory afterwards.</description>
    </item>
    
  </channel>
</rss>
